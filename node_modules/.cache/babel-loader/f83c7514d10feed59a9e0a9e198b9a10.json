{"ast":null,"code":"import _classCallCheck from \"/Users/zivp/WebstormProjects/my-redux-keep/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/zivp/WebstormProjects/my-redux-keep/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/zivp/WebstormProjects/my-redux-keep/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/zivp/WebstormProjects/my-redux-keep/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/zivp/WebstormProjects/my-redux-keep/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/zivp/WebstormProjects/my-redux-keep/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/zivp/WebstormProjects/my-redux-keep/src/Components/NoteSubmit.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { createCheckedNote, createUncheckedNote } from \"../actions\";\n\nvar NoteSubmit =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(NoteSubmit, _Component);\n\n  function NoteSubmit(props) {\n    var _this;\n\n    _classCallCheck(this, NoteSubmit);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(NoteSubmit).call(this, props));\n\n    _this.ConditionalBoxRender = function () {\n      return _this.state.text === '' ? '' : React.createElement(\"input\", {\n        type: \"checkbox\",\n        onChange: _this.handleCheck,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18\n        },\n        __self: this\n      });\n    };\n\n    _this.handleTextChange = function (event) {\n      return _this.setState({\n        text: event.target.value\n      });\n    };\n\n    _this.handleCheck = function () {\n      return _this.setState({\n        checked: !_this.state.checked\n      }, function () {\n        return _this.submitNote();\n      });\n    };\n\n    _this.handleSubmit = function (event) {\n      event.preventDefault();\n\n      _this.submitNote();\n    };\n\n    _this.submitNote = function () {\n      if (_this.state.text !== '') {\n        if (_this.state.checked) _this.props.createCheckedNote(_this.state.id = _this.props.nextId);else {\n          _this.props.createUncheckedNote(_this.state.id = _this.props.nextId);\n        }\n\n        _this.setState({\n          text: '',\n          checked: false\n        });\n      }\n    };\n\n    _this.state = {\n      text: '',\n      checked: false\n    };\n    _this.ConditionalBoxRender = _this.ConditionalBoxRender.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleTextChange = _this.handleTextChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleCheck = _this.handleCheck.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.submitNote = _this.submitNote.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(NoteSubmit, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, this.ConditionalBoxRender(), React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"Take a note...\",\n        name: \"inputName\",\n        value: this.state.text,\n        onChange: this.handleTextChange,\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return NoteSubmit;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    id: state.nextId\n  };\n};\n\nexport default connect(mapStateToProps, {\n  createCheckedNote: createCheckedNote,\n  createUncheckedNote: createUncheckedNote\n})(NoteSubmit);","map":{"version":3,"sources":["/Users/zivp/WebstormProjects/my-redux-keep/src/Components/NoteSubmit.js"],"names":["React","Component","connect","createCheckedNote","createUncheckedNote","NoteSubmit","props","ConditionalBoxRender","state","text","handleCheck","handleTextChange","event","setState","target","value","checked","submitNote","handleSubmit","preventDefault","id","nextId","bind","mapStateToProps"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport {createCheckedNote, createUncheckedNote} from \"../actions\";\n\nclass NoteSubmit extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {text: '', checked: false};\n\n        this.ConditionalBoxRender = this.ConditionalBoxRender.bind(this);\n        this.handleTextChange = this.handleTextChange.bind(this);\n        this.handleCheck = this.handleCheck.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.submitNote = this.submitNote.bind(this);\n    }\n\n    ConditionalBoxRender = () => this.state.text === '' ? '' : <input type =\"checkbox\" onChange ={this.handleCheck}/>;\n\n    handleTextChange = (event) => this.setState({text: event.target.value});\n\n    handleCheck = () => this.setState({checked: !this.state.checked}, () => this.submitNote());\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        this.submitNote();\n    };\n\n    submitNote = () =>{\n        if(this.state.text !== ''){\n            if(this.state.checked)\n                this.props.createCheckedNote(this.state.id = this.props.nextId);\n            else {\n                \n                this.props.createUncheckedNote(this.state.id = this.props.nextId);\n            }\n            this.setState({text: '', checked: false});\n        }\n    };\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                {this.ConditionalBoxRender()}\n            <input type=\"text\" placeholder=\"Take a note...\" name=\"inputName\"\n                   value={this.state.text} onChange={this.handleTextChange} autoComplete=\"off\"/>\n            </form>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({id: state.nextId});\n\nexport default connect(mapStateToProps, {createCheckedNote, createUncheckedNote})(NoteSubmit);"]},"metadata":{},"sourceType":"module"}